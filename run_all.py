#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è #8
–ö—É–ø–∏ (–ø—ñ—Ä–∞–º—ñ–¥–∏)
"""

import sys
import time
import traceback

def run_task(task_name, task_function):
    """
    –ó–∞–ø—É—Å–∫–∞—î –æ–∫—Ä–µ–º–µ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
    
    Args:
        task_name (str): –ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è
        task_function (callable): –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    
    Returns:
        bool: True —è–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ, False —ñ–Ω–∞–∫—à–µ
    """
    print(f"\n{'='*70}")
    print(f"üöÄ {task_name}")
    print(f"{'='*70}")
    
    try:
        start_time = time.time()
        task_function()
        end_time = time.time()
        
        execution_time = end_time - start_time
        print(f"\n‚úÖ {task_name} –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        print(f"‚è±Ô∏è  –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {execution_time:.3f} —Å–µ–∫—É–Ω–¥")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ {task_name}:")
        print(f"   {str(e)}")
        print("\n–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É:")
        traceback.print_exc()
        return False

def task1_main():
    """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è: –ó'—î–¥–Ω–∞–Ω–Ω—è –∫–∞–±–µ–ª—ñ–≤"""
    try:
        import task1
        if hasattr(task1, 'main'):
            task1.main()
        else:
            # –Ø–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è main –≤—ñ–¥—Å—É—Ç–Ω—è, –≤–∏–∫–æ–Ω—É—î–º–æ –±–∞–∑–æ–≤—É –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é
            print("–§—É–Ω–∫—Ü—ñ—è main() –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞—î–º–æ –±–∞–∑–æ–≤—É –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é...")
            from task1 import minimize_cable_connection_cost_simple
            
            # –¢–µ—Å—Ç–æ–≤—ñ –≤–∏–ø–∞–¥–∫–∏
            test_cases = [
                [4, 3, 2, 6],
                [1, 2, 3, 4, 5],
                [10, 20, 30]
            ]
            
            for cables in test_cases:
                cost = minimize_cable_connection_cost_simple(cables)
                print(f"–ö–∞–±–µ–ª—ñ {cables}: –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å = {cost}")
                
    except ImportError:
        print("‚ùå –§–∞–π–ª task1.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        raise

def task2_main():
    """–ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è: –ó–ª–∏—Ç—Ç—è k —Å–ø–∏—Å–∫—ñ–≤"""
    try:
        import task2
        if hasattr(task2, 'main'):
            task2.main()
        else:
            # –Ø–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è main –≤—ñ–¥—Å—É—Ç–Ω—è, –≤–∏–∫–æ–Ω—É—î–º–æ –±–∞–∑–æ–≤—É –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é
            print("–§—É–Ω–∫—Ü—ñ—è main() –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞—î–º–æ –±–∞–∑–æ–≤—É –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é...")
            from task2 import merge_k_lists
            
            # –û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ –∑ –∑–∞–≤–¥–∞–Ω–Ω—è
            lists = [[1, 4, 5], [1, 3, 4], [2, 6]]
            merged_list = merge_k_lists(lists)
            print(f"–°–ø–∏—Å–∫–∏: {lists}")
            print(f"–í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫: {merged_list}")
            
    except ImportError:
        print("‚ùå –§–∞–π–ª task2.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        print("üí° –î–æ–¥–∞—Ç–∫–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è —î –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–º, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ...")
        return

def demo_heaps_usage():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –º–æ–¥—É–ª—è heapq"""
    import heapq
    
    print("üìö –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –†–û–ë–û–¢–ò –ó –ö–£–ü–ê–ú–ò (heapq)")
    print("=" * 50)
    
    # –ë–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –∫—É–ø–æ—é
    print("\nüèóÔ∏è  –ë–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó:")
    data = [3, 1, 4, 1, 5, 9, 2, 6]
    print(f"–ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ: {data}")
    
    heapq.heapify(data)
    print(f"–ü—ñ—Å–ª—è heapify: {data}")
    
    print(f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç: {data[0]}")
    
    min_elem = heapq.heappop(data)
    print(f"–í–∏—Ç—è–≥–Ω—É–ª–∏ –º—ñ–Ω—ñ–º—É–º: {min_elem}, –∫—É–ø–∞ —Ç–µ–ø–µ—Ä: {data}")
    
    heapq.heappush(data, 0)
    print(f"–î–æ–¥–∞–ª–∏ 0: {data}")
    
    # n –Ω–∞–π–º–µ–Ω—à–∏—Ö/–Ω–∞–π–±—ñ–ª—å—à–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    print(f"\nüìä –ö–æ—Ä–∏—Å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:")
    original = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]
    print(f"–î–∞–Ω—ñ: {original}")
    print(f"3 –Ω–∞–π–º–µ–Ω—à—ñ: {heapq.nsmallest(3, original)}")
    print(f"3 –Ω–∞–π–±—ñ–ª—å—à—ñ: {heapq.nlargest(3, original)}")

def performance_comparison():
    """–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ä—ñ–∑–Ω–∏—Ö –ø—ñ–¥—Ö–æ–¥—ñ–≤"""
    import random
    
    print("\n‚ö° –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü")
    print("=" * 40)
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    sizes = [100, 1000, 5000]
    
    for size in sizes:
        print(f"\nüìä –¢–µ—Å—Ç –¥–ª—è {size} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤:")
        
        # –¢–µ—Å—Ç –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è 1 (–∑'—î–¥–Ω–∞–Ω–Ω—è –∫–∞–±–µ–ª—ñ–≤)
        cables = [random.randint(1, 100) for _ in range(size)]
        
        try:
            from task1 import minimize_cable_connection_cost_simple
            
            start = time.time()
            cost = minimize_cable_connection_cost_simple(cables)
            heap_time = time.time() - start
            
            print(f"   üîå –ó'—î–¥–Ω–∞–Ω–Ω—è –∫–∞–±–µ–ª—ñ–≤ (–∫—É–ø–∞): {heap_time:.4f}s, –≤–∞—Ä—Ç—ñ—Å—Ç—å: {cost}")
            
        except ImportError:
            print("   üîå task1.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        # –¢–µ—Å—Ç –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è 2 (–∑–ª–∏—Ç—Ç—è —Å–ø–∏—Å–∫—ñ–≤)
        k = min(10, size // 10)  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–∏—Å–∫—ñ–≤
        if k > 0:
            lists = []
            for _ in range(k):
                sublist = sorted([random.randint(1, 1000) for _ in range(size // k)])
                lists.append(sublist)
            
            try:
                from task2 import merge_k_lists
                
                start = time.time()
                result = merge_k_lists(lists)
                merge_time = time.time() - start
                
                print(f"   üîó –ó–ª–∏—Ç—Ç—è {k} —Å–ø–∏—Å–∫—ñ–≤ (–∫—É–ø–∞): {merge_time:.4f}s, –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: {len(result)}")
                
            except ImportError:
                print("   üîó task2.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å"""
    print("üèóÔ∏è –î–û–ú–ê–®–ù–Ñ –ó–ê–í–î–ê–ù–ù–Ø #8: –ö–£–ü–ò (–ü–Ü–†–ê–ú–Ü–î–ò)")
    print("–í–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å")
    print("=" * 70)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∑ –∫—É–ø–∞–º–∏
    demo_heaps_usage()
    
    # –°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    tasks = [
        ("–û–°–ù–û–í–ù–ï –ó–ê–í–î–ê–ù–ù–Ø: –ú—ñ–Ω—ñ–º—ñ–∑–∞—Ü—ñ—è –≤–∏—Ç—Ä–∞—Ç –Ω–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∫–∞–±–µ–ª—ñ–≤", task1_main),
        ("–î–û–î–ê–¢–ö–û–í–ï –ó–ê–í–î–ê–ù–ù–Ø: –ó–ª–∏—Ç—Ç—è k –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤", task2_main)
    ]
    
    results = []
    total_start_time = time.time()
    
    # –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
    for task_name, task_function in tasks:
        success = run_task(task_name, task_function)
        results.append((task_name, success))
        
        # –ü–∞—É–∑–∞ –º—ñ–∂ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–≥–ª—è–¥—É
        if success and task_name != tasks[-1][0]:
            try:
                input("\n‚è∏Ô∏è  –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è...")
            except KeyboardInterrupt:
                print("\n\n‚ö†Ô∏è  –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
                break
        elif not success:
            # –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –ø–∏—Ç–∞—î–º–æ —á–∏ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏
            try:
                user_choice = input("\n‚ùì –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —ñ–Ω—à–∏—Ö –∑–∞–≤–¥–∞–Ω—å? (y/n): ")
                if user_choice.lower() not in ['y', 'yes', '—Ç–∞–∫', '—Ç']:
                    break
            except KeyboardInterrupt:
                print("\n\n‚ö†Ô∏è  –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
                break
    
    # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    if any(result[1] for result in results):  # –Ø–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–ª–æ—Å—å
        try:
            input("\n‚è∏Ô∏è  –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ...")
            performance_comparison()
        except KeyboardInterrupt:
            pass
    
    total_end_time = time.time()
    total_time = total_end_time - total_start_time
    
    return results[0][1] if results else False  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è

def interactive_mode():
    """–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º –≤–∏–±–æ—Ä—É –∑–∞–≤–¥–∞–Ω—å"""
    print("üîÑ –Ü–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ò–ô –†–ï–ñ–ò–ú")
    print("–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:")
    print("1. –û—Å–Ω–æ–≤–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è: –ó'—î–¥–Ω–∞–Ω–Ω—è –∫–∞–±–µ–ª—ñ–≤")
    print("2. –î–æ–¥–∞—Ç–∫–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è: –ó–ª–∏—Ç—Ç—è k —Å–ø–∏—Å–∫—ñ–≤")
    print("3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è heapq")
    print("4. –¢–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
    print("5. –í–∏–∫–æ–Ω–∞—Ç–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è")
    print("0. –í–∏—Ö—ñ–¥")
    
    tasks_map = {
        '1': ("–û–°–ù–û–í–ù–ï –ó–ê–í–î–ê–ù–ù–Ø", task1_main),
        '2': ("–î–û–î–ê–¢–ö–û–í–ï –ó–ê–í–î–ê–ù–ù–Ø", task2_main),
        '3': ("–î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø HEAPQ", demo_heaps_usage),
        '4': ("–¢–ï–°–¢–ò –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü", performance_comparison),
        '5': ("–í–°–Ü –ó–ê–í–î–ê–ù–ù–Ø", main)
    }
    
    while True:
        try:
            choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä (0-5): ").strip()
            
            if choice == '0':
                print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
            elif choice in tasks_map:
                task_name, task_function = tasks_map[choice]
                if choice == '5':
                    task_function()
                    break
                else:
                    if choice in ['3', '4']:
                        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
                        print(f"\nüöÄ {task_name}")
                        print("="*50)
                        task_function()
                    else:
                        run_task(task_name, task_function)
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  –ü—Ä–æ–≥—Ä–∞–º–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
            break
        except EOFError:
            print("\n\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break

if __name__ == "__main__":
    print("üèóÔ∏è –î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è #8: –ö—É–ø–∏ (–ø—ñ—Ä–∞–º—ñ–¥–∏)")
    print("=" * 50)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    if len(sys.argv) > 1:
        if sys.argv[1] == "--interactive" or sys.argv[1] == "-i":
            interactive_mode()
        elif sys.argv[1] == "--demo":
            demo_heaps_usage()
        elif sys.argv[1] == "--performance":
            performance_comparison()
        elif sys.argv[1] == "--help" or sys.argv[1] == "-h":
            print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:")
            print("  python3 run_all.py              # –í–∏–∫–æ–Ω–∞—Ç–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è")
            print("  python3 run_all.py -i           # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º")
            print("  python3 run_all.py --demo       # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è heapq")
            print("  python3 run_all.py --performance # –¢–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
            print("  python3 run_all.py --help       # –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É")
        else:
            print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç: {sys.argv[1]}")
            print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ --help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏")
    else:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        try:
            success = main()
            sys.exit(0 if success else 1)
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
            sys.exit(1)
