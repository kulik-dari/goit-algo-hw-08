"""
–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è #8: –ö—É–ø–∏ (–ø—ñ—Ä–∞–º—ñ–¥–∏)
–î–æ–¥–∞—Ç–∫–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è: –ó–ª–∏—Ç—Ç—è k –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤

–ó–∞–¥–∞—á–∞: –î–∞–Ω–æ k –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª. 
–ü–æ—Ç—Ä—ñ–±–Ω–æ –æ–±'—î–¥–Ω–∞—Ç–∏ —ó—Ö —É –æ–¥–∏–Ω –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫—É–ø—É –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–ª–∏—Ç—Ç—è.
"""

import heapq
from typing import List, Iterator

def merge_k_lists(lists: List[List[int]]) -> List[int]:
    """
    –û–±'—î–¥–Ω—É—î k –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤ –≤ –æ–¥–∏–Ω –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ 
    –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –∫—É–ø–∏.
    
    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫—É–ø—É –ø–µ—Ä—à–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∑ –∫–æ–∂–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
    2. –ù–∞ –∫–æ–∂–Ω–æ–º—É –∫—Ä–æ—Ü—ñ –≤–∏—Ç—è–≥—É—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –∑ –∫—É–ø–∏
    3. –î–æ–¥–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –∑ —Ç–æ–≥–æ –∂ —Å–ø–∏—Å–∫—É –¥–æ –∫—É–ø–∏
    4. –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –¥–æ —Ç–∏—Ö –ø—ñ—Ä, –ø–æ–∫–∏ –∫—É–ø–∞ –Ω–µ –ø–æ—Ä–æ–∂–Ω—è
    
    Args:
        lists (List[List[int]]): –°–ø–∏—Å–æ–∫ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤
        
    Returns:
        List[int]: –û–±'—î–¥–Ω–∞–Ω–∏–π –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫
    """
    if not lists:
        return []
    
    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Å–ø–∏—Å–∫–∏
    non_empty_lists = [lst for lst in lists if lst]
    if not non_empty_lists:
        return []
    
    # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—É–ø–∞: (–∑–Ω–∞—á–µ–Ω–Ω—è, —ñ–Ω–¥–µ–∫—Å_—Å–ø–∏—Å–∫—É, —ñ–Ω–¥–µ–∫—Å_–µ–ª–µ–º–µ–Ω—Ç—É)
    heap = []
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫—É–ø—É –ø–µ—Ä—à–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∑ –∫–æ–∂–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
    for list_idx, lst in enumerate(non_empty_lists):
        if lst:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
            heapq.heappush(heap, (lst[0], list_idx, 0))
    
    result = []
    
    # –í–∏—Ç—è–≥—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –∫—É–ø–∏ —Ç–∞ –¥–æ–¥–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—ñ
    while heap:
        value, list_idx, element_idx = heapq.heappop(heap)
        result.append(value)
        
        # –Ø–∫—â–æ –≤ —Å–ø–∏—Å–∫—É —î –Ω–∞—Å—Ç—É–ø–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ –¥–æ –∫—É–ø–∏
        if element_idx + 1 < len(non_empty_lists[list_idx]):
            next_value = non_empty_lists[list_idx][element_idx + 1]
            heapq.heappush(heap, (next_value, list_idx, element_idx + 1))
    
    return result

def merge_k_lists_with_iterators(lists: List[List[int]]) -> List[int]:
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —ñ—Ç–µ—Ä–∞—Ç–æ—Ä—ñ–≤.
    
    Args:
        lists (List[List[int]]): –°–ø–∏—Å–æ–∫ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤
        
    Returns:
        List[int]: –û–±'—î–¥–Ω–∞–Ω–∏–π –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫
    """
    if not lists:
        return []
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ—Ç–µ—Ä–∞—Ç–æ—Ä–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
    iterators = [iter(lst) for lst in lists if lst]
    heap = []
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫—É–ø—É –ø–µ—Ä—à–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏
    for i, iterator in enumerate(iterators):
        try:
            value = next(iterator)
            heapq.heappush(heap, (value, i, iterator))
        except StopIteration:
            continue
    
    result = []
    
    while heap:
        value, list_idx, iterator = heapq.heappop(heap)
        result.append(value)
        
        # –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –∑ —Ç–æ–≥–æ –∂ —ñ—Ç–µ—Ä–∞—Ç–æ—Ä–∞
        try:
            next_value = next(iterator)
            heapq.heappush(heap, (next_value, list_idx, iterator))
        except StopIteration:
            continue
    
    return result

def merge_two_sorted_lists(list1: List[int], list2: List[int]) -> List[int]:
    """
    –ó–ª–∏—Ç—Ç—è –¥–≤–æ—Ö –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤ (–±–∞–∑–æ–≤–∏–π –≤–∏–ø–∞–¥–æ–∫).
    
    Args:
        list1, list2: –í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ —Å–ø–∏—Å–∫–∏
        
    Returns:
        List[int]: –û–±'—î–¥–Ω–∞–Ω–∏–π –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫
    """
    result = []
    i = j = 0
    
    while i < len(list1) and j < len(list2):
        if list1[i] <= list2[j]:
            result.append(list1[i])
            i += 1
        else:
            result.append(list2[j])
            j += 1
    
    # –î–æ–¥–∞—î–º–æ –∑–∞–ª–∏—à–∫–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
    result.extend(list1[i:])
    result.extend(list2[j:])
    
    return result

def merge_k_lists_divide_and_conquer(lists: List[List[int]]) -> List[int]:
    """
    –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ –ø—ñ–¥—Ö—ñ–¥ "—Ä–æ–∑–¥—ñ–ª—è–π —Ç–∞ –≤–æ–ª–æ–¥–∞—Ä—é–π".
    
    Args:
        lists (List[List[int]]): –°–ø–∏—Å–æ–∫ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤
        
    Returns:
        List[int]: –û–±'—î–¥–Ω–∞–Ω–∏–π –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫
    """
    if not lists:
        return []
    if len(lists) == 1:
        return lists[0]
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥—ñ–ª–∏–º–æ —Å–ø–∏—Å–∫–∏ –Ω–∞–≤–ø—ñ–ª
    mid = len(lists) // 2
    left = merge_k_lists_divide_and_conquer(lists[:mid])
    right = merge_k_lists_divide_and_conquer(lists[mid:])
    
    return merge_two_sorted_lists(left, right)

def demonstrate_algorithm_step_by_step(lists: List[List[int]]):
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä—É—î –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∫—Ä–æ–∫–æ–≤–æ.
    
    Args:
        lists (List[List[int]]): –°–ø–∏—Å–æ–∫ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤
    """
    print(f"üì• –í—Ö—ñ–¥–Ω—ñ —Å–ø–∏—Å–∫–∏: {lists}")
    
    if not lists:
        print("‚úÖ –ü–æ—Ä–æ–∂–Ω—ñ–π –≤—Ö—ñ–¥ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫")
        return []
    
    non_empty_lists = [lst for lst in lists if lst]
    if not non_empty_lists:
        print("‚úÖ –í—Å—ñ —Å–ø–∏—Å–∫–∏ –ø–æ—Ä–æ–∂–Ω—ñ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫")
        return []
    
    print(f"üìä –§—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ —Å–ø–∏—Å–∫–∏: {non_empty_lists}")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    heap = []
    for list_idx, lst in enumerate(non_empty_lists):
        if lst:
            heapq.heappush(heap, (lst[0], list_idx, 0))
    
    print(f"üèóÔ∏è  –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫—É–ø–∞: {heap}")
    
    result = []
    step = 1
    
    while heap:
        value, list_idx, element_idx = heapq.heappop(heap)
        result.append(value)
        
        print(f"   –ö—Ä–æ–∫ {step}: –í–∏—Ç—è–≥—É—î–º–æ {value} –∑—ñ —Å–ø–∏—Å–∫—É {list_idx}")
        print(f"            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫–∏ —â–æ: {result}")
        
        if element_idx + 1 < len(non_empty_lists[list_idx]):
            next_value = non_empty_lists[list_idx][element_idx + 1]
            heapq.heappush(heap, (next_value, list_idx, element_idx + 1))
            print(f"            –î–æ–¥–∞—î–º–æ {next_value} –¥–æ –∫—É–ø–∏")
        else:
            print(f"            –°–ø–∏—Å–æ–∫ {list_idx} –≤–∏—á–µ—Ä–ø–∞–Ω–æ")
        
        print(f"            –ö—É–ø–∞: {sorted(heap)}")
        print()
        step += 1
    
    print(f"‚úÖ –§—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    return result

def benchmark_approaches(lists: List[List[int]]):
    """
    –ü–æ—Ä—ñ–≤–Ω—é—î —Ä—ñ–∑–Ω—ñ –ø—ñ–¥—Ö–æ–¥–∏ –¥–æ –∑–ª–∏—Ç—Ç—è —Å–ø–∏—Å–∫—ñ–≤.
    
    Args:
        lists (List[List[int]]): –°–ø–∏—Å–æ–∫ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤
    """
    import time
    
    print(f"\n‚ö° –ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è {len(lists)} —Å–ø–∏—Å–∫—ñ–≤")
    
    # –ü—ñ–¥—Ö—ñ–¥ –∑ –∫—É–ø–æ—é
    start = time.time()
    result_heap = merge_k_lists(lists)
    time_heap = time.time() - start
    
    # –ü—ñ–¥—Ö—ñ–¥ –∑ —ñ—Ç–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
    start = time.time()
    result_iterators = merge_k_lists_with_iterators(lists)
    time_iterators = time.time() - start
    
    # –ü—ñ–¥—Ö—ñ–¥ "—Ä–æ–∑–¥—ñ–ª—è–π —Ç–∞ –≤–æ–ª–æ–¥–∞—Ä—é–π"
    start = time.time()
    result_divide = merge_k_lists_divide_and_conquer(lists)
    time_divide = time.time() - start
    
    # –ù–∞—ó–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ (–∑–ª–∏—Ç—Ç—è –ø–æ —á–µ—Ä–∑—ñ)
    start = time.time()
    result_naive = []
    for lst in lists:
        result_naive = merge_two_sorted_lists(result_naive, lst)
    time_naive = time.time() - start
    
    print(f"   üèóÔ∏è  –ö—É–ø–∞:              {time_heap:.6f}s")
    print(f"   üîÑ –Ü—Ç–µ—Ä–∞—Ç–æ—Ä–∏:         {time_iterators:.6f}s")
    print(f"   ‚ö° –†–æ–∑–¥—ñ–ª—è–π-–≤–æ–ª–æ–¥–∞—Ä—é–π: {time_divide:.6f}s")
    print(f"   üìà –ù–∞—ó–≤–Ω–∏–π:           {time_naive:.6f}s")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ
    assert result_heap == result_iterators == result_divide == result_naive
    print(f"   ‚úÖ –í—Å—ñ –ø—ñ–¥—Ö–æ–¥–∏ –¥–∞—é—Ç—å –æ–¥–Ω–∞–∫–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

def test_algorithm():
    """–¢–µ—Å—Ç—É—î –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥–∞—Ö"""
    print("üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ê–õ–ì–û–†–ò–¢–ú–£")
    print("=" * 50)
    
    test_cases = [
        # –û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ –∑ –∑–∞–≤–¥–∞–Ω–Ω—è
        [[1, 4, 5], [1, 3, 4], [2, 6]],
        
        # –†—ñ–∑–Ω—ñ –≤–∏–ø–∞–¥–∫–∏
        [[1, 2, 3], [4, 5, 6], [7, 8, 9]],  # –ë–µ–∑ –ø–µ—Ä–µ—Ç–∏–Ω—ñ–≤
        [[1, 3, 5], [2, 4, 6]],             # –ß–µ—Ä–≥—É–≤–∞–Ω–Ω—è
        [[1], [2], [3]],                     # –ü–æ –æ–¥–Ω–æ–º—É –µ–ª–µ–º–µ–Ω—Ç—É
        [[], [1, 2], [3, 4]],               # –ó –ø–æ—Ä–æ–∂–Ω—ñ–º —Å–ø–∏—Å–∫–æ–º
        [[1, 1, 1], [2, 2, 2]],             # –ó –¥—É–±–ª—ñ–∫–∞—Ç–∞–º–∏
        [[5, 4, 3], [2, 1]],                # –ù–µ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ (–¥–ª—è —Ç–µ—Å—Ç—É)
        [[]],                                # –¢—ñ–ª—å–∫–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫
        [],                                  # –ü–æ—Ä–æ–∂–Ω—ñ–π –≤—Ö—ñ–¥
        [[1, 10, 100], [2, 20], [3, 30, 300, 3000]]  # –†—ñ–∑–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏
    ]
    
    for i, lists in enumerate(test_cases, 1):
        print(f"\nüìä –¢–µ—Å—Ç {i}: {lists}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ —Å–ø–∏—Å–∫–∏ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ
        all_sorted = all(lst == sorted(lst) for lst in lists)
        if not all_sorted:
            print("   ‚ö†Ô∏è  –£–≤–∞–≥–∞: –ù–µ –≤—Å—ñ —Å–ø–∏—Å–∫–∏ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ!")
        
        result = merge_k_lists(lists)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å
        expected = sorted([item for sublist in lists for item in sublist])
        if result == expected:
            print("   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        else:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞! –û—á—ñ–∫—É–≤–∞–ª–æ—Å—è: {expected}")

def analyze_complexity():
    """–ê–Ω–∞–ª—ñ–∑—É—î —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—É"""
    print("\nüìà –ê–ù–ê–õ–Ü–ó –°–ö–õ–ê–î–ù–û–°–¢–Ü –ê–õ–ì–û–†–ò–¢–ú–£")
    print("=" * 40)
    print("–ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è:")
    print("  ‚Ä¢ k - –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–∏—Å–∫—ñ–≤")
    print("  ‚Ä¢ n - –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
    print("\n–ü—ñ–¥—Ö—ñ–¥ –∑ –∫—É–ø–æ—é:")
    print("  ‚Ä¢ –ß–∞—Å–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: O(n log k)")
    print("  ‚Ä¢ –ü—Ä–æ—Å—Ç–æ—Ä–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: O(k)")
    print("  ‚Ä¢ –ö—É–ø–∞ –º—ñ—Å—Ç–∏—Ç—å –º–∞–∫—Å–∏–º—É–º k –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
    print("  ‚Ä¢ n –æ–ø–µ—Ä–∞—Ü—ñ–π –≤—Å—Ç–∞–≤–∫–∏/–≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –∫—É–ø–∏ —Ä–æ–∑–º—ñ—Ä—É k")
    print("\n–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ —ñ–Ω—à–∏–º–∏ –ø—ñ–¥—Ö–æ–¥–∞–º–∏:")
    print("  ‚Ä¢ –ù–∞—ó–≤–Ω–∏–π (–ø–æ—Å–ª—ñ–¥–æ–≤–Ω–µ –∑–ª–∏—Ç—Ç—è): O(kn)")
    print("  ‚Ä¢ –†–æ–∑–¥—ñ–ª—è–π-–≤–æ–ª–æ–¥–∞—Ä—é–π: O(n log k)")
    print("  ‚Ä¢ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: O(n log n)")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
    print("üîó –î–û–î–ê–¢–ö–û–í–ï –ó–ê–í–î–ê–ù–ù–Ø: –ó–õ–ò–¢–¢–Ø K –í–Ü–î–°–û–†–¢–û–í–ê–ù–ò–• –°–ü–ò–°–ö–Ü–í")
    print("=" * 70)
    print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –∫—É–ø–∏ –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–ª–∏—Ç—Ç—è")
    
    # –û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ –∑ –∑–∞–≤–¥–∞–Ω–Ω—è
    lists = [[1, 4, 5], [1, 3, 4], [2, 6]]
    print(f"\nüéØ –û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥: {lists}")
    
    merged_list = merge_k_lists(lists)
    print(f"–í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫: {merged_list}")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è
    print(f"\n" + "=" * 70)
    print("üîç –î–ï–¢–ê–õ–¨–ù–ê –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ê–õ–ì–û–†–ò–¢–ú–£")
    demonstrate_algorithm_step_by_step(lists)
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    test_algorithm()
    
    # –ë–µ–Ω—á–º–∞—Ä–∫
    print(f"\n" + "=" * 70)
    print("‚ö° –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü")
    
    # –ú–∞–ª–∏–π —Ç–µ—Å—Ç
    small_lists = [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
    benchmark_approaches(small_lists)
    
    # –ë—ñ–ª—å—à–∏–π —Ç–µ—Å—Ç
    big_lists = [list(range(i, 100, 10)) for i in range(10)]
    benchmark_approaches(big_lists)
    
    # –ê–Ω–∞–ª—ñ–∑ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
    analyze_complexity()
    
    print(f"\nüéâ –î–æ–¥–∞—Ç–∫–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")

if __name__ == "__main__":
    main()
