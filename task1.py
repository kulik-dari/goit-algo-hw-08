"""
–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è #8: –ö—É–ø–∏ (–ø—ñ—Ä–∞–º—ñ–¥–∏)
–û—Å–Ω–æ–≤–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è: –ú—ñ–Ω—ñ–º—ñ–∑–∞—Ü—ñ—è –≤–∏—Ç—Ä–∞—Ç –Ω–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∫–∞–±–µ–ª—ñ–≤

–ó–∞–¥–∞—á–∞: –Ñ –¥–µ–∫—ñ–ª—å–∫–∞ –º–µ—Ä–µ–∂–µ–≤–∏—Ö –∫–∞–±–µ–ª—ñ–≤ —Ä—ñ–∑–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏, —ó—Ö –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±'—î–¥–Ω–∞—Ç–∏ 
–ø–æ –¥–≤–∞ –∑–∞ —Ä–∞–∑ –≤ –æ–¥–∏–Ω –∫–∞–±–µ–ª—å —É –ø–æ—Ä—è–¥–∫—É, —è–∫–∏–π –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –Ω–∞–π–º–µ–Ω—à–∏—Ö –≤–∏—Ç—Ä–∞—Ç.
–í–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–≤–æ—Ö –∫–∞–±–µ–ª—ñ–≤ –¥–æ—Ä—ñ–≤–Ω—é—é—Ç—å —ó—Ö–Ω—ñ–π —Å—É–º—ñ –¥–æ–≤–∂–∏–Ω.

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫—É–ø—É (min-heap) –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è.
"""

import heapq
from typing import List

def minimize_cable_connection_cost(cables: List[int]) -> int:
    """
    –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–∞–±–µ–ª—ñ–≤.
    
    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –°—Ç–≤–æ—Ä—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫—É–ø—É –∑ –¥–æ–≤–∂–∏–Ω –∫–∞–±–µ–ª—ñ–≤
    2. –ù–∞ –∫–æ–∂–Ω–æ–º—É –∫—Ä–æ—Ü—ñ –±–µ—Ä–µ–º–æ –¥–≤–∞ –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ –∫–∞–±–µ–ª—ñ
    3. –ó'—î–¥–Ω—É—î–º–æ —ó—Ö (–≤–∞—Ä—Ç—ñ—Å—Ç—å = —Å—É–º–∞ —ó—Ö –¥–æ–≤–∂–∏–Ω)
    4. –î–æ–¥–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–∏–π –∫–∞–±–µ–ª—å –Ω–∞–∑–∞–¥ –¥–æ –∫—É–ø–∏
    5. –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –¥–æ —Ç–∏—Ö –ø—ñ—Ä, –ø–æ–∫–∏ –Ω–µ –∑–∞–ª–∏—à–∏—Ç—å—Å—è –æ–¥–∏–Ω –∫–∞–±–µ–ª—å
    
    Args:
        cables (List[int]): –°–ø–∏—Å–æ–∫ –¥–æ–≤–∂–∏–Ω –∫–∞–±–µ–ª—ñ–≤
        
    Returns:
        int: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∑–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑'—î–¥–Ω–∞–Ω–Ω—è
    """
    if len(cables) <= 1:
        return 0
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫—É–ø—É –∑ –¥–æ–≤–∂–∏–Ω –∫–∞–±–µ–ª—ñ–≤
    heap = cables.copy()
    heapq.heapify(heap)
    
    total_cost = 0
    operations = []  # –î–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π
    
    # –ü–æ–∫–∏ —É –∫—É–ø—ñ –±—ñ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –∫–∞–±–µ–ª—é
    while len(heap) > 1:
        # –ë–µ—Ä–µ–º–æ –¥–≤–∞ –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ –∫–∞–±–µ–ª—ñ
        first = heapq.heappop(heap)
        second = heapq.heappop(heap)
        
        # –í–∞—Ä—Ç—ñ—Å—Ç—å –∑'—î–¥–Ω–∞–Ω–Ω—è
        connection_cost = first + second
        total_cost += connection_cost
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
        operations.append((first, second, connection_cost))
        
        # –î–æ–¥–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–∏–π –∫–∞–±–µ–ª—å –Ω–∞–∑–∞–¥ –¥–æ –∫—É–ø–∏
        heapq.heappush(heap, connection_cost)
    
    return total_cost, operations

def minimize_cable_connection_cost_simple(cables: List[int]) -> int:
    """
    –°–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Ç—ñ–ª—å–∫–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å.
    
    Args:
        cables (List[int]): –°–ø–∏—Å–æ–∫ –¥–æ–≤–∂–∏–Ω –∫–∞–±–µ–ª—ñ–≤
        
    Returns:
        int: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∑–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑'—î–¥–Ω–∞–Ω–Ω—è
    """
    if len(cables) <= 1:
        return 0
    
    heap = cables.copy()
    heapq.heapify(heap)
    
    total_cost = 0
    
    while len(heap) > 1:
        first = heapq.heappop(heap)
        second = heapq.heappop(heap)
        
        connection_cost = first + second
        total_cost += connection_cost
        
        heapq.heappush(heap, connection_cost)
    
    return total_cost

def demonstrate_algorithm_step_by_step(cables: List[int]):
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä—É—î –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∫—Ä–æ–∫–æ–≤–æ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è.
    
    Args:
        cables (List[int]): –°–ø–∏—Å–æ–∫ –¥–æ–≤–∂–∏–Ω –∫–∞–±–µ–ª—ñ–≤
    """
    print(f"üîå –ü–æ—á–∞—Ç–∫–æ–≤—ñ –∫–∞–±–µ–ª—ñ: {cables}")
    print(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–±–µ–ª—ñ–≤: {len(cables)}")
    
    if len(cables) <= 1:
        print("‚úÖ –ú–µ–Ω—à–µ –¥–≤–æ—Ö –∫–∞–±–µ–ª—ñ–≤ - –∑'—î–¥–Ω–∞–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ")
        return 0
    
    heap = cables.copy()
    heapq.heapify(heap)
    
    print(f"\nüèóÔ∏è  –°—Ç–≤–æ—Ä–µ–Ω–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫—É–ø—É: {heap}")
    print("\nüìã –ü–æ–∫—Ä–æ–∫–æ–≤–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:")
    
    total_cost = 0
    step = 1
    
    while len(heap) > 1:
        first = heapq.heappop(heap)
        second = heapq.heappop(heap)
        connection_cost = first + second
        total_cost += connection_cost
        
        print(f"   –ö—Ä–æ–∫ {step}: –ó'—î–¥–Ω—É—î–º–æ –∫–∞–±–µ–ª—ñ {first} + {second} = {connection_cost}")
        print(f"            –í–∞—Ä—Ç—ñ—Å—Ç—å –∫—Ä–æ–∫—É: {connection_cost}")
        print(f"            –ù–∞–∫–æ–ø–∏—á–µ–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {total_cost}")
        
        heapq.heappush(heap, connection_cost)
        print(f"            –ö—É–ø–∞ –ø—ñ—Å–ª—è –∫—Ä–æ–∫—É: {sorted(heap)}")
        print()
        
        step += 1
    
    print(f"‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {total_cost}")
    return total_cost

def compare_with_naive_approach(cables: List[int]):
    """
    –ü–æ—Ä—ñ–≤–Ω—é—î –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –∑ –Ω–∞—ó–≤–Ω–∏–º (—Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è + –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–µ –∑'—î–¥–Ω–∞–Ω–Ω—è).
    
    Args:
        cables (List[int]): –°–ø–∏—Å–æ–∫ –¥–æ–≤–∂–∏–Ω –∫–∞–±–µ–ª—ñ–≤
    """
    print(f"\nüîç –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—ñ–¥—Ö–æ–¥—ñ–≤ –¥–ª—è –∫–∞–±–µ–ª—ñ–≤: {cables}")
    
    # –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ (–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—É–ø–∞)
    optimal_cost = minimize_cable_connection_cost_simple(cables)
    
    # –ù–∞—ó–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ (–ø—Ä–æ—Å—Ç–æ —Å–æ—Ä—Ç—É—î–º–æ —ñ –∑'—î–¥–Ω—É—î–º–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ)
    sorted_cables = sorted(cables)
    naive_cost = 0
    current_length = sorted_cables[0]
    
    for i in range(1, len(sorted_cables)):
        current_length += sorted_cables[i]
        naive_cost += current_length
    
    print(f"   üéØ –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ (–∫—É–ø–∞): {optimal_cost}")
    print(f"   üìà –ù–∞—ó–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ (—Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è): {naive_cost}")
    print(f"   üí∞ –ï–∫–æ–Ω–æ–º—ñ—è: {naive_cost - optimal_cost} ({((naive_cost - optimal_cost) / naive_cost * 100):.1f}%)")

def test_algorithm():
    """–¢–µ—Å—Ç—É—î –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥–∞—Ö"""
    print("üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ê–õ–ì–û–†–ò–¢–ú–£")
    print("=" * 50)
    
    test_cases = [
        [4, 3, 2, 6],           # –û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥
        [1, 2, 3, 4, 5],        # –ü–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ —á–∏—Å–ª–∞
        [10, 20, 30],           # –ü—Ä–æ—Å—Ç–∏–π –≤–∏–ø–∞–¥–æ–∫
        [1, 1, 1, 1],           # –û–¥–Ω–∞–∫–æ–≤—ñ –¥–æ–≤–∂–∏–Ω–∏
        [100],                   # –û–¥–∏–Ω –∫–∞–±–µ–ª—å
        [],                      # –ü–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫
        [5, 10, 15, 20, 25, 30], # –ë—ñ–ª—å—à–∏–π –ø—Ä–∏–∫–ª–∞–¥
        [1, 100, 2, 99, 3, 98]   # –ó–º—ñ—à–∞–Ω—ñ –≤–µ–ª–∏–∫—ñ —ñ –º–∞–ª—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    ]
    
    for i, cables in enumerate(test_cases, 1):
        print(f"\nüìä –¢–µ—Å—Ç {i}: {cables}")
        
        if len(cables) <= 1:
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: 0 (–º–µ–Ω—à–µ –¥–≤–æ—Ö –∫–∞–±–µ–ª—ñ–≤)")
            continue
        
        cost = minimize_cable_connection_cost_simple(cables)
        print(f"   –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {cost}")
        
        # –î–ª—è –Ω–µ–≤–µ–ª–∏–∫–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –ø–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π —Ä–æ–∑–±—ñ—Ä
        if len(cables) <= 6:
            print("   –î–µ—Ç–∞–ª—å–Ω–∏–π —Ä–æ–∑–±—ñ—Ä:")
            demonstrate_algorithm_step_by_step(cables)

def analyze_complexity():
    """–ê–Ω–∞–ª—ñ–∑—É—î —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—É"""
    print("\nüìà –ê–ù–ê–õ–Ü–ó –°–ö–õ–ê–î–ù–û–°–¢–Ü –ê–õ–ì–û–†–ò–¢–ú–£")
    print("=" * 40)
    print("–ß–∞—Å–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: O(n log n)")
    print("  ‚Ä¢ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—É–ø–∏: O(n)")
    print("  ‚Ä¢ n-1 –æ–ø–µ—Ä–∞—Ü—ñ–π –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞ –≤—Å—Ç–∞–≤–∫–∏: O((n-1) * log n)")
    print("  ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞: O(n log n)")
    print("\n–ü—Ä–æ—Å—Ç–æ—Ä–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: O(n)")
    print("  ‚Ä¢ –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫—É–ø–∏: O(n)")
    print("\nüéØ –û–ø—Ç–∏–º–∞–ª—å–Ω—ñ—Å—Ç—å:")
    print("  ‚Ä¢ –ñ–∞–¥—ñ–±–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–∞—î –æ–ø—Ç–∏–º–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è")
    print("  ‚Ä¢ –ó–∞–≤–∂–¥–∏ –≤–∏–±–∏—Ä–∞—î–º–æ –¥–≤–∞ –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ –∫–∞–±–µ–ª—ñ")
    print("  ‚Ä¢ –ú—ñ–Ω—ñ–º—ñ–∑—É—î–º–æ –≤–ø–ª–∏–≤ –¥–æ–≤–≥–∏—Ö –∫–∞–±–µ–ª—ñ–≤ –Ω–∞ –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
    print("üîå –î–û–ú–ê–®–ù–Ñ –ó–ê–í–î–ê–ù–ù–Ø #8: –ú–Ü–ù–Ü–ú–Ü–ó–ê–¶–Ü–Ø –í–ò–¢–†–ê–¢ –ù–ê –ó'–Ñ–î–ù–ê–ù–ù–Ø –ö–ê–ë–ï–õ–Ü–í")
    print("=" * 70)
    print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –∫—É–ø–∏ (heapq) –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∫–∞–±–µ–ª—ñ–≤")
    
    # –û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥
    cables = [4, 3, 2, 6]
    print(f"\nüéØ –û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥: {cables}")
    cost, operations = minimize_cable_connection_cost(cables)
    
    print(f"\nüìã –ü–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π:")
    for i, (first, second, result) in enumerate(operations, 1):
        print(f"   {i}. –ó'—î–¥–Ω—É—î–º–æ {first} + {second} = {result}")
    
    print(f"\n‚úÖ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∑–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {cost}")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è
    print(f"\n" + "=" * 70)
    print("üîç –î–ï–¢–ê–õ–¨–ù–ê –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ê–õ–ì–û–†–ò–¢–ú–£")
    demonstrate_algorithm_step_by_step(cables)
    
    # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—ñ–¥—Ö–æ–¥—ñ–≤
    print(f"\n" + "=" * 70)
    print("‚öñÔ∏è  –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ó –ù–ê–á–í–ù–ò–ú –ü–Ü–î–•–û–î–û–ú")
    compare_with_naive_approach(cables)
    compare_with_naive_approach([1, 2, 3, 4, 5])
    compare_with_naive_approach([10, 1, 20, 2, 30, 3])
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    test_algorithm()
    
    # –ê–Ω–∞–ª—ñ–∑ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
    analyze_complexity()
    
    print(f"\nüéâ –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")

if __name__ == "__main__":
    main()
